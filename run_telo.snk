#!/home/gmoney/.local/bin/snakemake -s
"""
This Snakemake pipeline is intended to absorb HG002 pangenome sequencing data and methylation call it on AWS.  Based on Ariel's original snakemake
    * Aligns to the reference genome with winnowmap
    * Indexes methylation with f5c
    * Calls methylation with Nanopolish
    * Formats methylation calls with nanopore-methylation-utilities
    fast5 directory and fastq file must have same basename, summary file not required 
"""
configfile: "config.yaml"
###-------input paths/files -------###

import glob
import re

##WT - note check this to figure out parallelization properly
##cores=config["cores"]

##Software config
#minimap2 = config["minimap2"]
#Tidehunter = config["Tidehunter"]
#Porechop = config["Porechop"]

##Pass in directory we are working in --config base=dir - default is /data
outdir=config["outdir"]
ref = config["ref"]
   
###--------------###

# ###------- Pipeline Rules -------#####


rule all:
    input:
        #expand( outdir + "/{sample}/tailed.fastq", sample=config["reads"]),
        #expand( outdir + "/{sample}/chopped.primary.bed", sample=config["reads"]),
        expand( outdir + "/{sample}/telomere_lengths.tsv", sample=config["reads"])

rule Tidehunter:
    input:
        reads = lambda wildcards: config["reads"][wildcards.sample]
    output:
        out = outdir + "/{sample}/cons.out"
    params:
        telo=config["telo_seq"],
        #threads = config["threads"],
        tidehunter = config["TideHunter"]
    threads: config["threads"]
    #message: """Running Tidehunter"""
    shell:
        "{params.tidehunter} -t {threads} -f 2 {input.reads} > {output.out}"

rule filter_fq:
    input:
        cons=rules.Tidehunter.output, 
        reads = lambda wildcards: config["reads"][wildcards.sample]
    params:
        telo = config["telo_seq"],
        seqpath = config["seqkit"],
        sample = lambda wildcards: wildcards.sample
    output:
        fq = outdir + "/{sample}/tailed.fastq"
    #message: """Filtering Tidehunter output"""
    shell:
        "./filter.sh -i {input.cons} -r {input.reads} -s {params.telo} -p {params.seqpath} -n {params.sample} > {output.fq}"

rule Porechop:
    input:
        fastq=rules.filter_fq.output
    params:
        porechop = config["Porechop"]
    threads: config["threads"]
    output:
        chopfq = outdir + "/{sample}/chopped.fastq"
    #message: """Replacing adapters.py and running Porechop"""
    shell:
        "cp adapters.py {params.porechop}/porechop; "
        "{params.porechop}/porechop-runner.py -t {threads} -i {input.fastq} -o {output.chopfq}"

rule Minimap:
    input:
        fastq=rules.Porechop.output
    params:
        minimap = config["Minimap2"],
        samtools = config["samtools"],
        ref = config["ref"],
        bedtools = config["bedtools"]
    threads: config["threads"]
    output:
        bam = outdir + "/{sample}/chopped.primary.bam",
        bed = outdir + "/{sample}/chopped.primary.bed"
    #message: """Mapping chopped reads with Minimap2"""
    shell:
        "{params.minimap} -ax map-ont {params.ref} {input.fastq} -t {threads} | {params.samtools} view -@ {threads} -Sbh -bq 20 -F 2048 -F 256 | {params.samtools} sort -@ {threads} -o {output.bam}; "
        "{params.samtools} index -@ {threads} {output.bam}; "
        "{params.bedtools} bamtobed -i {output.bam} > {output.bed}"

rule Calculate_length:
    input:
        bed=rules.Minimap.output.bed,
        starts = config["starts"]
    params:
        cov = config["coverage"]
    output:
        out = outdir + "/{sample}/telomere_lengths.tsv"
    #message: """Calculating telomere lengths"""
    shell:
        "./Telo_length_AG.R -c {params.cov} -s {input.starts} -i {input.bed} -o {output.out}"
